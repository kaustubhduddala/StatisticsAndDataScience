word_count_summary <- summary(books$Word_Count)
word_count_summary
# Calculate number of words in each title
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
# Plot the distribution of word counts
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1) +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency") +
theme_minimal()
# Summary statistics
word_count_summary <- summary(books$Word_Count)
word_count_summary
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency")
summary(books$Word_Count)
lastName <- ifelse(
is.na(word(author, 2)),
word(author, -1),
word(author, 2)
)
books <- tibble(Title = title, Author = author, averageRating = averageRating, LastName = lastName)
shortest_last_name <- books %>%
filter(nchar(lastName) == min(nchar(lastName))) %>%
select(Title, Author)
shortest_last_name
books <- books %>%
mutate(Word_Count = str_count(Title, "\\S+"))
ggplot(books, aes(x = Word_Count)) +
geom_histogram(binwidth = 1, color = "black") +
labs(title = "Distribution of Number of Words in Book Titles", x = "Number of Words", y = "Frequency")
summary(books$Word_Count)
#Randomly sample from a vector:
x <- c(4,6,9,10,15,20)
sample(x,1)
#Sample with replacement:
sample(x,5,replace=TRUE)
?runif
#Pull 10 random numbers from a Uniform(0,100) distribution:
runif(10,0,100)
#Pull 10 random numbers from a Uniform(0,100) distribution:
runif(10,0,100)
#Pull 10 random numbers from a Uniform(0,100) distribution:
runif(10,0,100)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#Pull 10 random numbers from a Normal(0,1) distribution:
rnorm(10,0,1)
#For reproducable results:
set.seed(56)
rnorm(10,0,1)
#For reproducable results:
set.seed(56)
rnorm(10,0,1)
#For reproducable results:
set.seed(56)
rnorm(10,0,1)
?rnorm
#Group Practice A:
rnorm(100,100,15)
#Group Practice A:
rnorm(100,100,15)
#Group Practice A:
rnorm(100,100,15)
#Group Practice A:
rnorm(100,100,15)
#Create empty vector to store outcomes:
myrolls <- numeric(0)
#"Roll" a 6-sided die 5,000 times:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
}
#Plot results:
library(ggplot2)
mydata <- data.frame(myrolls)
ggplot(mydata) + geom_histogram(aes(x=myrolls))
View(mydata)
#Create empty vector to store outcomes:
myrolls <- numeric(0)
#"Roll" a 6-sided die 5,000 times:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
}
#Plot results:
library(ggplot2)
mydata <- data.frame(myrolls)
ggplot(mydata) + geom_histogram(aes(x=myrolls))
#Create empty vector to store outcomes:
myrolls <- numeric(0)
#"Roll" a 6-sided die 5,000 times:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
}
#Plot results:
library(ggplot2)
mydata <- data.frame(myrolls)
ggplot(mydata) + geom_histogram(aes(x=myrolls))
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Group Practice C
#Create empty vectors to store outcomes:
myrolls <- numeric(0)
my4prob <- numeric(0)
#Store relative frequency of rolling a 4:
for (i in 1:5000) {
x <- sample(1:6,1)+sample(1:6,1)
myrolls[i] <- x
my4prob[i] <- sum(myrolls==4)/i
}
#Plot results:
plot(1:5000, my4prob, type='l')
abline(h=1/6, lty=2, col='red')
#Define door options:
doors <- c(1,2,3)
#Create empty vectors to store outcomes:
always.stay <- c()
always.switch <- c()
#Simulate probabilities of "staying" and "switching":
for (i in 1:1000){
door.car <- sample(doors, 1)
door.choose <- sample(doors, 1)
always.stay[i] <- (door.choose == door.car)
remaining.doors <- setdiff(doors, union(door.car, door.choose))
if (length(remaining.doors) == 1){
shown.door <- remaining.doors
}
else shown.door <- sample(remaining.doors, 1)
door.switch <- setdiff(doors, union(door.choose, shown.door))
always.switch[i] <- (door.switch == door.car)
}
?setdiff
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringr)
web_scaped <- read_html("https://jobs.apple.com/app/en-us/profile/roles")
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
View(web_scaped)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringr)
web_scaped <- read_html("https://www.goodreads.com/list/show/1360.Best_Banned_Censored_and_Challenged_Books")
title <- html_text(html_elements(web_scaped, ".bookTitle span"))
author <- html_text(html_elements(web_scaped, ".authorName span")) %>%
str_squish()
averageRating <- html_text(html_elements(web_scaped, ".minirating")) %>%
str_extract("[0-9]\\.[0-9]+") %>%
as.numeric()
books <- tibble(Title = title, Author = author, AverageRating = averageRating)
print(books, n = 10)
View(web_scaped)
View(web_scaped)
library(tidyverse)
library(ggplot2)
library(rvest)
library(stringr)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
web_scaped <- read_html("https://www.goodreads.com/list/show/1360.Best_Banned_Censored_and_Challenged_Books")
title <- html_text(html_elements(web_scaped, ".bookTitle span"))
author <- html_text(html_elements(web_scaped, ".authorName span")) %>%
str_squish()
averageRating <- html_text(html_elements(web_scaped, ".minirating")) %>%
str_extract("[0-9]\\.[0-9]+") %>%
as.numeric()
books <- tibble(Title = title, Author = author, AverageRating = averageRating)
print(books, n = 10)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
location <- html_text(html_elements(web_scaped, ".profile-jobs-item__city div"))
table <- tibble(Title = title, Loco = location)
View(table)
View(table)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple2.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
location <- html_text(html_elements(web_scaped, ".profile-jobs-item__city div"))
table <- tibble(Title = title, Loco = location)
web_scaped <- read_html("/Users/kaustubhduddala/Downloads/odwnlawmd2FE/Careers at Apple3.html")
title <- html_text(html_elements(web_scaped, ".profile-jobs-item__info h3"))
location <- html_text(html_elements(web_scaped, ".profile-jobs-item__city div"))
table <- tibble(Title = title, Loco = location)
setwd("~/Documents/UT/SDS/SDS 315/Homework 3")
p2d <- read.csv("sclass.csv")
p2ad <- p2d %>%
filter(year == 2011) %>%
filter(trim == "550")
p2d <- read.csv("sclass.csv")
p2ad <- p2d %<%
filter(year == 2011) %>%
filter(trim == "550")
p2d <- read.csv("sclass.csv")
p2ad <- p2d %>%
filter(year == 2011) %>%
filter(trim == "550")
p2d <- read.csv("sclass.csv")
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "550")
library(ggplot2)
library(tidyverse)
library(mosaic)
library(ggplot2)
library(tidyverse)
library(mosaic)
p1d <- read.csv("gasprices.csv")
p2d <- read.csv("sclass.csv")
View(p2d)
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "550")
# A
View(p2d)
View(p2ad)
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "63 AMG")
# A
library(ggplot2)
library(tidyverse)
library(mosaic)
p1d <- read.csv("gasprices.csv")
p2d <- read.csv("sclass.csv")
# A
boot_p1d_comp = do(10000)*diffmean(Price ~ Competitors, data=resample(p1d))
confint(boot_p1d_comp, level = 0.95)
mean(Price ~ Competitors, data=p1d)
# B
boot_p1d_income = do(10000)*cor(Price ~ Income, data=resample(p1d))
confint(boot_p1d_income, level = 0.95)
# C
boot_p1d_stop = do(10000)*diffmean(Price ~ Stoplight, data=resample(p1d))
confint(boot_p1d_stop, level = 0.95)
mean(Price ~ Stoplight, data=p1d)
# D
boot_p1d_high = do(10000)*diffmean(Price ~ Highway, data=resample(p1d))
confint(boot_p1d_high, level = 0.95)
mean(Price ~ Highway, data=p1d)
# E
boot_p1d_brand = do(10000)*diffmean(Price ~ Brand=="Shell", data=resample(p1d))
confint(boot_p1d_brand, level = 0.95)
mean(Price ~ Brand=="Shell", data=p1d)
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "63 AMG")
# A
View(p2ad)
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "63 AMG")
# A
boot_p2ad = do(10000)*mean(mileage, data=resample(p2ad))
?mean
View(p2ad)
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "63 AMG")
# A
boot_p2ad = do(10000)*mean( ~ mileage, data=resample(p2ad))
confint(boot_p2ad, level = 0.95)
p2bd <-  filter(p2d, year == 2011) %>%
filter(trim == "550")
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
?prop
?prop
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "63 AMG")
# A
boot_p2ad = do(10000)*prop( ~ color=="Black", data=resample(p2ad))
confint(boot_p2ad, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2ad = do(10000)*prop(~ color=="Black", data=resample(p2ad))
confint(boot_p2ad, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2ad))
confint(boot_p2bd, level = 0.95)
View(p2bd)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2ad))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2ad))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2ad))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*diffprop(~ color=="Black", data=resample(p2ad))
?prop
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd))
confint(boot_p2bd, level = 0.95)
View(boot_p2bd)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
library(ggplot2)
library(tidyverse)
library(mosaic)
p1d <- read.csv("gasprices.csv")
p2d <- read.csv("sclass.csv")
p2ad <-  filter(p2d, year == 2011) %>%
filter(trim == "63 AMG")
# A
boot_p2ad = do(10000)*mean(~ mileage, data=resample(p2ad))
confint(boot_p2ad, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd))
confint(boot_p2bd, level = 0.95)
?resample
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd, 1438))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd, 1438))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd, 1438))
confint(boot_p2bd, level = 0.95)
p2bd <-  filter(p2d, year == 2014) %>%
filter(trim == "550")
boot_p2bd = do(10000)*prop(~ color=="Black", data=resample(p2bd, 1438))
confint(boot_p2bd, level = 0.95)
library(ggplot2)
library(tidyverse)
library(mosaic)
p1d <- read.csv("gasprices.csv")
p2d <- read.csv("sclass.csv")
p3d <- read.csv("nbc_pilotsurvey.csv")
fp3d <- filter(p3d, Show == "Living with Ed" || Show == "My Name is Earl")
fp3d <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
View(fp3d)
pilot_a %>% group_by(Show) %>% summarise(mean_price = mean(Q1_Happy, na.rm = TRUE))
fp3d %>% group_by(Show) %>% summarise(mean_price = mean(Q1_Happy, na.rm = TRUE))
fp3d %>% group_by(Show) %>% summarise(average_happy = mean(Q1_Happy, na.rm = TRUE))
fp3d <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
fp3d %>% group_by(Show) %>% summarise(average_happy = mean(Q1_Happy, na.rm = TRUE))
p3da <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
boot_p3da = do(10000)*diffmean(Q1_Happy ~ Show, data=resample(p3da))
confint(boot_p3da, level = 0.95)
?mean
p3da <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
mean(Q1_Happy, p3da)
p3da <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
mean(Q1_Happy, data=p3da)
p3da <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
mean(~ Q1_Happy, data=p3da)
boot_p3da = do(10000)*diffmean(Q1_Happy ~ Show, data=resample(p3da))
confint(boot_p3da, level = 0.95)
p3da <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
mean(Q1_Happy ~ Show, data=p3da)
boot_p3da = do(10000)*diffmean(Q1_Happy ~ Show, data=resample(p3da))
confint(boot_p3da, level = 0.95)
p3da <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
mean(Q1_Happy ~ Show, data=p3da)
boot_p3da = do(10000)*diffmean(Q1_Happy ~ Show, data=resample(p3da))
confint(boot_p3da, level = 0.95)
p3da <- filter(p3d, Show == "Living with Ed" | Show == "My Name is Earl")
mean(Q1_Happy ~ Show, data=p3da)
boot_p3da = do(10000)*diffmean(Q1_Happy ~ Show, data=resample(p3da))
confint(boot_p3da, level = 0.95)
p3db <- filter(p3d, Show == "The Biggest Loser" | Show == "The Apprentice: Los Angeles")
fp3db <- f3db %>% group_by(Show) %>% summarise(average_happy = mean(Q1_Happy, na.rm = TRUE))
p3db <- filter(p3d, Show == "The Biggest Loser" | Show == "The Apprentice: Los Angeles")
fp3db <- p3db %>% group_by(Show) %>% summarise(average_happy = mean(Q1_Happy, na.rm = TRUE))
boot_p3db = do(10000)*diffmean(Q1_Annoyed ~ Show, data=resample(p3db))
confint(boot_p3db, level = 0.95)
p3dc <- filter(p3d, Show == "Dancing with the Stars")
boot_p3dc = do(10000)*prop( ~ Q1_Confused >= 4, data=resample(p3dc))
View(p3dc)
View(p3dc)
p3dc <- filter(p3d, Show == "Dancing with the Stars")
boot_p3dc = do(10000)*prop( ~ Q2_Confused >= 4, data=resample(p3dc))
p3dc <- filter(p3d, Show == "Dancing with the Stars")
boot_p3dc = do(10000)*prop( ~ Q2_Confusing >= 4, data=resample(p3dc))
confint(boot_p3dc, level = 0.95)
library(ggplot2)
library(tidyverse)
library(mosaic)
p1d <- read.csv("gasprices.csv")
p2d <- read.csv("sclass.csv")
p3d <- read.csv("nbc_pilotsurvey.csv")
p4d <- read.csv("ebay.csv")
p4da <- p4d %>%
mutate(revenue_ratio = rev_after / rev_before)
p4da <- p4d %>%
mutate(revenue_ratio = rev_after / rev_before)
p4da_treatment <- p4da %>% filter(adwords_pause == 1)
p4da_control <- p4da %>% filter(adwords_pause == 0)
View(p4d)
p4da <- p4d %>%
mutate(revenue_ratio = rev_after / rev_before)
diffmean(revenue_ratio ~ adwords_pause, data=p4da)
p4da <- p4d %>%
mutate(revenue_ratio = rev_after / rev_before)
diffmean(revenue_ratio ~ adwords_pause, data=p4da)
mean(Price ~ Competitors, data=p1d)
p4da <- p4d %>%
mutate(revenue_ratio = rev_after / rev_before)
diffmean(revenue_ratio ~ adwords_pause, data=p4da)
boot_p4da = do(10000)*diffmean(revenue_ratio ~ adwords_pause, data=resample(p4da))
confint(boot_p4da, level = 0.95)
# A
boot_p1d_comp = do(10000)*diffmean(Price ~ Competitors, data=resample(p1d))
confint(boot_p1d_comp, level = 0.95)
mean(Price ~ Competitors, data=p1d)
View(p1d)
# E
boot_p1d_brand = do(10000)*diffmean(Price ~ Brand=="Shell", data=resample(p1d))
confint(boot_p1d_brand, level = 0.95)
mean(Price ~ Brand=="Shell", data=p1d)
p3db <- filter(p3d, Show == "The Biggest Loser" | Show == "The Apprentice: Los Angeles")
fp3db <- p3db %>% group_by(Show) %>% summarise(average_happy = mean(Q1_Happy, na.rm = TRUE))
fp3db
boot_p3db = do(10000)*diffmean(Q1_Annoyed ~ Show, data=resample(p3db))
confint(boot_p3db, level = 0.95)
p3db <- filter(p3d, Show == "The Biggest Loser" | Show == "The Apprentice: Los Angeles")
fp3db <- p3db %>% group_by(Show) %>% summarise(average_annyoed = mean(Q1_Annoyed, na.rm = TRUE))
fp3db
boot_p3db = do(10000)*diffmean(Q1_Annoyed ~ Show, data=resample(p3db))
confint(boot_p3db, level = 0.95)
p4da <- p4d %>%
mutate(revenue_ratio = rev_after / rev_before)
diffmean(revenue_ratio ~ adwords_pause, data=p4da)
boot_p4da = do(10000)*diffmean(revenue_ratio ~ adwords_pause, data=resample(p4da))
confint(boot_p4da, level = 0.95)
