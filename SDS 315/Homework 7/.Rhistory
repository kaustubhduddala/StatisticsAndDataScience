hist(chi_val, main = "Distribution of Chi-squared Values for sentences", xlab = "Chi-squared Statistic", breaks = 50)
p4d_sentences <- c(
"She opened the book and started to read the first chapter, eagerly anticipating what might come next.",
"Despite the heavy rain, they decided to go for a long walk in the park, crossing the main avenue by the fountain in the center.",
"The museum’s new exhibit features ancient artifacts from various civilizations around the world.",
"He carefully examined the document, looking for any clues that might help solve the mystery.",
"The students gathered in the auditorium to listen to the guest speaker’s inspiring lecture.",
"Feeling vexed after an arduous and zany day at work, she hoped for a peaceful and quiet evening at home, cozying up after a quick dinner with some TV, or maybe a book on her upcoming visit to Auckland.",
"The chef demonstrated how to prepare a delicious meal using only locally sourced ingredients, focusing mainly on some excellent dinner recipes from Spain.",
"They watched the sunset from the hilltop, marveling at the beautiful array of colors in the sky.",
"The committee reviewed the proposal and provided many points of useful feedback to improve the project’s effectiveness.",
"Despite the challenges faced during the project, the team worked tirelessly to ensure its successful completion, resulting in a product that exceeded everyone’s expectations."
)
watermark_chi <- sapply(p4d_sentences, clean, freq_table = p4d_letter)
pvals <- sapply(watermark_chi, \(x) mean(chi_val >= x, na.rm = TRUE))
results_table <- as_tibble(data.frame(
Sentence = 1:10,
Chi_Squared = round(watermark_chi, 1),
P_value = round(pvals, digits = 3) %>% format.pval(eps = 0.0001, digits = 3)
)) %>% select(starts_with("S"):last_col())
results_table
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = read.csv(armfold.csv)
setwd("~/Documents/UT/SDS/SDS 315/Homework 7")
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = read.csv(armfold.csv)
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = read.csv("armfold.csv")
View(data)
cat("Females")
nrow(data$Sex == "Female")
cat("Males")
nrow(data$Sex == "Males")
?as.tibble
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = tibble(read.csv("armfold.csv"))
View(data)
View(data)
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = tibble(read.csv("armfold.csv"))
data
data
cat("Females")
nrow(data$Sex == "Female")
cat("Males")
nrow(data$Sex == "Male")
cat("Females")
nrow(data$Sex == "Female")
cat("Males")
nrow(data$Sex == "Male")
cat("Females")
nrow(armfold_data$LonR_fold[armfold_data$Sex == "Male"])
armfold_data$Sex == "Male"
cat("Females")
nrow(data$Sex == "Female")
cat("Males")
nrow(data$Sex == "Male")
data$Sex == "Male"
cat("Females")
isTRUE(data$Sex == "Male")
cat("Males")
nrow(data$Sex == "Male")
cat("Females")
sum(data$Sex == "Male")
cat("Males")
sum(data$Sex == "Male")
cat("Females")
sum(data$Sex == "Female")
cat("Males")
sum(data$Sex == "Male")
cat("Females")
num_female = sum(data$Sex == "Female")
num_female
cat("Males")
num_male = sum(data$Sex == "Male")
num_male
cat("Females")
num_female = sum(data$Sex == "Female")
num_female
cat("Males")
num_male = sum(data$Sex == "Male")
num_male
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
num_female = sum(data$Sex == "Female")
num_male = sum(data$Sex == "Male")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
cat("The number of males in the data set is", num_male, ", and the number of females is", num_female, "\n",
"The number of males who folded their left arm over their right is", males_left, "and the number of females who did so is", females_left, "\n",
"the sample proportion of males who folded their left arm over their right is", prop_male, "and the proportion of females who did so is", prop_female)
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
cat("The number of males in the data set is", num_male, "and the number of females is", num_female, "\n",
"The number of males who folded their left arm over their right is", males_left, "and the number of females who did so is", females_left, "\n",
"the sample proportion of males who folded their left arm over their right is", prop_male, "and the proportion of females who did so is", prop_female)
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
cat("The number of males in the data set is", num_male, "and the number of females is", num_female, "\n",
"The number of males who folded their left arm over their right is", males_left, "and the number of females who did so is", females_left, "\n",
"the sample proportion of males who folded their left arm over their right is", round(prop_male, digits=2), "and the proportion of females who did so is", prop_female)
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
cat("The number of males in the data set is", num_male, "and the number of females is", num_female, "\n",
"The number of males who folded their left arm over their right is", males_left, "and the number of females who did so is", females_left, "\n",
"the sample proportion of males who folded their left arm over their right is", round(prop_male, digits=2), "and the proportion of females who did so is", round(prop_female, digits=2))
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
cat("The number of males in the data set is", num_male, "and the number of females is", num_female, "\n",
"The number of males who folded their left arm over their right is", males_left, "and the number of females who did so is", females_left, "\n",
"the sample proportion of males who folded their left arm over their right is about", round(prop_male, digits=2), "and the proportion of females who did so is about", round(prop_female, digits=2))
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
res_confint <- res$conf.int
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
res_confint <- res$conf.int
se <- sqrt((prop_male * (1 - prop_male) / num_male) + (prop_female * (1 - prop_female) / num_female))
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
res_confint <- res$conf.int
se = sqrt((prop_male * (1 - prop_male) / num_male) + (prop_female * (1 - prop_female) / num_female))
moe = se*1.96
bound_lower = (prop_male - prop_female - moe)
bound_upper = (prop_male - prop_female + moe)
data = tibble(read.csv("armfold.csv"))
data2 = tibble(read.csv("turnout"))
data2 = tibble(read.csv("turnout.csv"))
num_call = sum(data2$GOTV_call == 1)
num_nocall = sum(data2$GOTV_call == 0)
voted1998_call = sum(data2$voted1998 == 1 & data2$GOTV_call == 1)
voted1998_nocall = sum(data2$voted1998 == 1 & data2$GOTV_call == 0)
prop_voted1998_call = voted1998_call/num_call
prop_voted1998_nocall = voted1998_nocall/num_nocall
votes = c(voted1998_call, voted1998_nocall)
total = c(num_call, num_nocall
diff <- prop.test(votes, total)
num_call = sum(data2$GOTV_call == 1)
num_nocall = sum(data2$GOTV_call == 0)
voted1998_call = sum(data2$voted1998 == 1 & data2$GOTV_call == 1)
voted1998_nocall = sum(data2$voted1998 == 1 & data2$GOTV_call == 0)
prop_voted1998_call = voted1998_call/num_call
prop_voted1998_nocall = voted1998_nocall/num_nocall
votes = c(voted1998_call, voted1998_nocall)
total = c(num_call, num_nocall)
diff <- prop.test(votes, total)
tab_gotv_96 <- table(daat2$GOTV_call, daat2$voted1996)
tab_gotv_96 <- table(data2$GOTV_call, data2$voted1996)
prop_test_gotv96 <- prop.test(tab_gotv_96)
print("95% Confidence Interval for Voting in 1996 and GOTV calls")
prop_test_gotv96
tab_v96_v98 <- table(data2$voted1998, data2$voted1996)
prop_test_v96_v98 <- prop.test(tab_v96_v98)
print("95% Confidence Interval for voting in 1996 and voting in 1998")
prop_test_v96_v98
tab_gotv_96 <- table(data2$GOTV_call, data2$voted1996)
prop_test_gotv96 <- prop.test(tab_gotv_96)
tab_v96_v98 <- table(data2$voted1998, data2$voted1996)
prop_test_v96_v98 <- prop.test(tab_v96_v98)
tab_gotv_96 <- table(data2$GOTV_call, data2$voted1996)
prop_test_gotv96 <- prop.test(tab_gotv_96)
tab_v96_v98 <- table(data2$voted1998, data2$voted1996)
prop_test_v96_v98 <- prop.test(tab_v96_v98)
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = tibble(read.csv("armfold.csv"))
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = tibble(read.csv("armfold.csv"))
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
res_confint <- res$conf.int
se = sqrt((prop_male * (1 - prop_male) / num_male) + (prop_female * (1 - prop_female) / num_female))
moe = se*1.96
bound_lower = (prop_male - prop_female - moe)
bound_upper = (prop_male - prop_female + moe)
data2 = tibble(read.csv("turnout.csv"))
num_call = sum(data2$GOTV_call == 1)
num_nocall = sum(data2$GOTV_call == 0)
voted1998_call = sum(data2$voted1998 == 1 & data2$GOTV_call == 1)
voted1998_nocall = sum(data2$voted1998 == 1 & data2$GOTV_call == 0)
prop_voted1998_call = voted1998_call/num_call
prop_voted1998_nocall = voted1998_nocall/num_nocall
votes = c(voted1998_call, voted1998_nocall)
total = c(num_call, num_nocall)
diff <- prop.test(votes, total)
tab_gotv_96 <- table(data2$GOTV_call, data2$voted1996)
prop_test_gotv96 <- prop.test(tab_gotv_96)
tab_v96_v98 <- table(data2$voted1998, data2$voted1996)
prop_test_v96_v98 <- prop.test(tab_v96_v98)
print("95% Confidence Interval for voting in 1996 and voting in 1998")
prop_test_v96_v98
tab_gotv_96 <- table(data2$GOTV_call, data2$voted1996)
prop_test_gotv96 <- prop.test(tab_gotv_96)
print("95% Confidence Interval for Voting in 1996 and GOTV calls")
prop_test_gotv96
tab_v96_v98 <- table(data2$voted1998, data2$voted1996)
prop_test_v96_v98 <- prop.test(tab_v96_v98)
print("95% Confidence Interval for voting in 1996 and voting in 1998")
prop_test_v96_v98
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = tibble(read.csv("armfold.csv"))
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
res_confint <- res$conf.int
se = sqrt((prop_male * (1 - prop_male) / num_male) + (prop_female * (1 - prop_female) / num_female))
moe = se*1.96
bound_lower = (prop_male - prop_female - moe)
bound_upper = (prop_male - prop_female + moe)
data2 = tibble(read.csv("turnout.csv"))
num_call = sum(data2$GOTV_call == 1)
num_nocall = sum(data2$GOTV_call == 0)
voted1998_call = sum(data2$voted1998 == 1 & data2$GOTV_call == 1)
voted1998_nocall = sum(data2$voted1998 == 1 & data2$GOTV_call == 0)
prop_voted1998_call = voted1998_call/num_call
prop_voted1998_nocall = voted1998_nocall/num_nocall
votes = c(voted1998_call, voted1998_nocall)
total = c(num_call, num_nocall)
diff <- prop.test(votes, total)
tab_gotv_96 <- table(data2$GOTV_call, data2$voted1996)
prop_test_gotv96 <- prop.test(tab_gotv_96)
print("95% Confidence Interval for Voting in 1996 and GOTV calls")
prop_test_gotv96
tab_v96_v98 <- table(data2$voted1998, data2$voted1996)
prop_test_v96_v98 <- prop.test(tab_v96_v98)
print("95% Confidence Interval for voting in 1996 and voting in 1998")
prop_test_v96_v98
gotv_v96_table <- table(data2$GOTV_call, data2$voted1996)
gotv_v96_test <- prop.test(gotv_v96_table)
print("95% Confidence Interval for the relationship between GOTV calls and voting in 1996:")
gotv_v96_test
v96_v98_table <- table(data2$voted1996, data2$voted1998)
v96_v98_test <- prop.test(v96_v98_table)
print("95% Confidence Interval for the relationship between voting in 1996 and voting in 1998:")
v96_v98_test
gotv_majorparty_table <- table(turnout$GOTV_call, turnout$MAJORPTY)
gotv_majorparty_table <- table(data2$GOTV_call, data2$MAJORPTY)
gotv_majorparty_test <- prop.test(gotv_majorparty_table)
print("95% Confidence Interval for the relationship between GOTV calls and major party registration:")
gotv_majorparty_test
v98_majorparty_table <- table(data2$voted1998, data2$MAJORPTY)
v98_majorparty_test <- prop.test(v98_majorparty_table)
print("95% Confidence Interval for the relationship between voting in 1998 and major party registration:")
v98_majorparty_test
boxplot(data2$AGE ~ data2$GOTV_call,
names = c("No GOTV Call", "Received GOTV Call"),
main = "Age Distribution by GOTV Call Status",
xlab = "GOTV Call Status",
ylab = "Age")
print("95% Confidence Interval for mean age by GOTV call status")
age_gotv_call_test <- t.test(data2$AGE ~ data2$GOTV_call)
age_gotv_call_test
boxplot(data2$AGE ~ data2$voted1998,
names = c("Did Not Vote in 1998", "Voted in 1998"),
main = "Age Distribution by Voting in 1998",
xlab = "Voting Status in 1998",
ylab = "Age")
print("95% Confidence Interval for mean age by voting status in 1998")
age_voting_1998_test <- t.test(data2$AGE ~ data2$voted1998)
age_voting_1998_test
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
data = tibble(read.csv("armfold.csv"))
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
res_confint <- res$conf.int
se = sqrt((prop_male * (1 - prop_male) / num_male) + (prop_female * (1 - prop_female) / num_female))
moe = se*1.96
bound_lower = (prop_male - prop_female - moe)
bound_upper = (prop_male - prop_female + moe)
data2 = tibble(read.csv("turnout.csv"))
num_call = sum(data2$GOTV_call == 1)
num_nocall = sum(data2$GOTV_call == 0)
voted1998_call = sum(data2$voted1998 == 1 & data2$GOTV_call == 1)
voted1998_nocall = sum(data2$voted1998 == 1 & data2$GOTV_call == 0)
prop_voted1998_call = voted1998_call/num_call
prop_voted1998_nocall = voted1998_nocall/num_nocall
votes = c(voted1998_call, voted1998_nocall)
total = c(num_call, num_nocall)
diff <- prop.test(votes, total)
gotv_v96_table <- table(data2$GOTV_call, data2$voted1996)
gotv_v96_test <- prop.test(gotv_v96_table)
print("95% Confidence Interval for the relationship between GOTV calls and voting in 1996:")
gotv_v96_test
v96_v98_table <- table(data2$voted1996, data2$voted1998)
v96_v98_test <- prop.test(v96_v98_table)
print("95% Confidence Interval for the relationship between voting in 1996 and voting in 1998:")
v96_v98_test
gotv_majorparty_table <- table(data2$GOTV_call, data2$MAJORPTY)
gotv_majorparty_test <- prop.test(gotv_majorparty_table)
print("95% Confidence Interval for the relationship between GOTV calls and major party registration:")
gotv_majorparty_test
v98_majorparty_table <- table(data2$voted1998, data2$MAJORPTY)
v98_majorparty_test <- prop.test(v98_majorparty_table)
print("95% Confidence Interval for the relationship between voting in 1998 and major party registration:")
v98_majorparty_test
boxplot(data2$AGE ~ data2$GOTV_call,
names = c("No GOTV Call", "Received GOTV Call"),
main = "Age Distribution by GOTV Call Status",
xlab = "GOTV Call Status",
ylab = "Age")
print("95% Confidence Interval for mean age by GOTV call status")
age_gotv_call_test <- t.test(data2$AGE ~ data2$GOTV_call)
age_gotv_call_test
boxplot(data2$AGE ~ data2$voted1998,
names = c("Did Not Vote in 1998", "Voted in 1998"),
main = "Age Distribution by Voting in 1998",
xlab = "Voting Status in 1998",
ylab = "Age")
print("95% Confidence Interval for mean age by voting status in 1998")
age_voting_1998_test <- t.test(data2$AGE ~ data2$voted1998)
age_voting_1998_test
matched_data <- matchit(GOTV_call ~ AGE + MAJORPTY + voted1996, data = data2, ratio = 5) %>% match.data()
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
library(MatchIt)
install.packages(MatchIt)
install.packages("MatchIt")
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
library(MatchIt)
library(ggplot2)
library(tidyverse)
library(mosaic)
library(knitr)
library(MatchIt)
data = tibble(read.csv("armfold.csv"))
num_male = sum(data$Sex == "Male")
num_female = sum(data$Sex == "Female")
males_left = sum(data$Sex == "Male" & data$LonR_fold == 1)
females_left = sum(data$Sex == "Female" & data$LonR_fold == 1)
prop_male = males_left/num_male
prop_female = females_left/num_female
lefts = c(males_left, females_left)
nums = c(num_male, num_female)
res = prop.test(lefts, nums)
res_confint <- res$conf.int
se = sqrt((prop_male * (1 - prop_male) / num_male) + (prop_female * (1 - prop_female) / num_female))
moe = se*1.96
bound_lower = (prop_male - prop_female - moe)
bound_upper = (prop_male - prop_female + moe)
data2 = tibble(read.csv("turnout.csv"))
num_call = sum(data2$GOTV_call == 1)
num_nocall = sum(data2$GOTV_call == 0)
voted1998_call = sum(data2$voted1998 == 1 & data2$GOTV_call == 1)
voted1998_nocall = sum(data2$voted1998 == 1 & data2$GOTV_call == 0)
prop_voted1998_call = voted1998_call/num_call
prop_voted1998_nocall = voted1998_nocall/num_nocall
votes = c(voted1998_call, voted1998_nocall)
total = c(num_call, num_nocall)
diff <- prop.test(votes, total)
gotv_v96_table <- table(data2$GOTV_call, data2$voted1996)
gotv_v96_test <- prop.test(gotv_v96_table)
print("95% Confidence Interval for the relationship between GOTV calls and voting in 1996:")
gotv_v96_test
v96_v98_table <- table(data2$voted1996, data2$voted1998)
v96_v98_test <- prop.test(v96_v98_table)
print("95% Confidence Interval for the relationship between voting in 1996 and voting in 1998:")
v96_v98_test
gotv_majorparty_table <- table(data2$GOTV_call, data2$MAJORPTY)
gotv_majorparty_test <- prop.test(gotv_majorparty_table)
print("95% Confidence Interval for the relationship between GOTV calls and major party registration:")
gotv_majorparty_test
v98_majorparty_table <- table(data2$voted1998, data2$MAJORPTY)
v98_majorparty_test <- prop.test(v98_majorparty_table)
print("95% Confidence Interval for the relationship between voting in 1998 and major party registration:")
v98_majorparty_test
boxplot(data2$AGE ~ data2$GOTV_call,
names = c("No GOTV Call", "Received GOTV Call"),
main = "Age Distribution by GOTV Call Status",
xlab = "GOTV Call Status",
ylab = "Age")
print("95% Confidence Interval for mean age by GOTV call status")
age_gotv_call_test <- t.test(data2$AGE ~ data2$GOTV_call)
age_gotv_call_test
boxplot(data2$AGE ~ data2$voted1998,
names = c("Did Not Vote in 1998", "Voted in 1998"),
main = "Age Distribution by Voting in 1998",
xlab = "Voting Status in 1998",
ylab = "Age")
print("95% Confidence Interval for mean age by voting status in 1998")
age_voting_1998_test <- t.test(data2$AGE ~ data2$voted1998)
age_voting_1998_test
matched_data <- matchit(GOTV_call ~ AGE + MAJORPTY + voted1996, data = data2, ratio = 5) %>% match.data()
print("Matched confidence intervals for GOTV calls and voting in 1996")
matched_v96_table <- table(matched_data$GOTV_call, matched_data$voted1996)
prop.test(matched_v96_table)
print("Matched confidence intervals for GOTV calls and major party registration")
matched_majorparty_table <- table(matched_data$GOTV_call, matched_data$MAJORPTY)
prop.test(matched_majorparty_table)
print("Matched confidence intervals for GOTV calls and mean ages")
t.test(matched_data$AGE ~ matched_data$GOTV_call)
call_matched_count <- sum(matched_data$GOTV_call == 1)
nocall_matched_count <- sum(matched_data$GOTV_call == 0)
voted_1998_call_matched <- sum(matched_data$voted1998 == 1 & matched_data$GOTV_call == 1)
voted_1998_nocall_matched <- sum(matched_data$voted1998 == 1 & matched_data$GOTV_call == 0)
prop_voted1998_call_matched <- voted_1998_call_matched / call_matched_count
prop_voted1998_nocall_matched <- voted_1998_nocall_matched / nocall_matched_count
votes_matched_count <- c(voted_1998_call_matched, voted_1998_nocall_matched)
totals_matched_count <- c(call_matched_count, nocall_matched_count)
diff_voted_1998_matched <- prop.test(votes_matched_count, totals_matched_count)
diff_voted_1998_matched
call_count_balanced <- sum(matched_data$GOTV_call == 1)
nocall_count_balanced <- sum(matched_data$GOTV_call == 0)
voted_1998_call_balanced <- sum(matched_data$voted1998 == 1 & matched_data$GOTV_call == 1)
voted_1998_nocall_balanced <- sum(matched_data$voted1998 == 1 & matched_data$GOTV_call == 0)
prop_1998_call_balanced <- voted_1998_call_balanced / call_count_balanced
prop_1998_nocall_balanced <- voted_1998_nocall_balanced / nocall_count_balanced
votes_balanced <- c(voted_1998_call_balanced, voted_1998_nocall_balanced)
totals_balanced <- c(call_count_balanced, nocall_count_balanced)
diff_balanced <- prop.test(votes_balanced, totals_balanced)
